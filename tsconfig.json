{
  "compilerOptions": {
    /*** Language and Environment ***/
    "target": "es5" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      /* Specify a set of bundled library declaration files that describe the target runtime environment. */
      "dom",
      "es2020"
    ],
    "jsx": "react-jsx" /* Specify what JSX code is generated. */,

    /*** Modules ***/
    "module": "commonjs" /* Specify what module code is generated. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "rootDir": "./" /* Specify the root folder within your source files. */,
    "baseUrl": "./" /* Specify the base directory to resolve non-relative module names. */,
    "typeRoots": [
      /* Specify multiple folders that act like `./node_modules/@types`. */
      "./node_modules/@types"
    ],
    "types": [
      /* Specify type package names to be included without being referenced in a source file. */
      "react",
      "react-dom",
      "styled-components"
    ],
    "resolveJsonModule": true /* Enable importing .json files */,

    /*** Emit ***/
    "outDir": "./out" /* Specify an output folder for all emitted files. */,
    "removeComments": true /* Disable emitting comments. */,

    /*** Interop Constraints ***/
    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,

    /*** Type Checking ***/
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
    "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,

    /*** Completeness ***/
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": ["./src/**/*.ts", "./src/**/*.tsx"],
  "exclude": ["node_modules"]
}
